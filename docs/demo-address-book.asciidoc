= Address Book Demonstration

This demonstration brings together all the topics covered in previous chapters.
The focus of this chapter is on using inter-portlet communication between two Vaadin Portlets.
Using this document along with the demonstration code, you will be able to understand the demonstration code and build similar applications yourself.

The learning goals are:

- Why are the events needed?
- How to send events from one Vaadin Portlet to another?
- How to listen for events from other Vaadin Portlets?
- How to update the portlet's state based on the event?

== Address Book Module

The address book demonstration show how to build a simple address book application using Vaadin Portlets.
The address book consists of two portlets.
One portlet, _contact list_, displays all the available contacts the user has.
The other portlet, _contact information_, show the information about the contact selected via the contact list.
Contact information portlet also allows the user to edit the existing contact.

=== Structure

The address book consists of two portlets and their view components.
The classes ending in `Portlet` are the classes extending `VaadinPortlet` and classes ending in `View` are the view component classes for the portlets.

- Contact list: `ListPortlet` and `ListPortletView`
+
Responsible for displaying the available contacts in the address book.
Allows user to select contacts to be displayed in the `FormView`.

- Contact information: `FormPortlet` and `FormPortletView`
+
Responsible for displaying and modifying the contact information in the address book.

The other classes are there to provide business logic and mock implementations for data services

=== Functionality Requirements as Portlets
*Contact List* +
The portlet operates in only one portlet mode: `view` and user cannot change the mode.
When user selects a contact from the list, the contact's details are displayed on the _contact information_ portlet.
When the contact's information is changed in the _contact information_ portlet, the relevant contact information is updated on the list.

In order to provide this functionality, the _contact list_ view class needs to

- implement `EventHandler` interface
- be able to send events

*Contact information* +
The portlet supports two portlets modes: `view` and `edit`.
When the portlet is in `view` mode, the contact information is only displayed and cannot be changed.
When user changes the portlet into `edit` mode, the information can be updated.
After editing the information, the user can either save or discard the changes.

In order to provide this functionality, the _contact list_ view class needs to

- implement `EventHandler` interface
- implement `PortletModeHandler` interface
- be able to send events

=== Implementation Details
In this section we have a look at selected parts of the view classes `ListPortletView` and `FormPortletView`.
The classes contain code that is not directly related to the portlet implementation and we will skip those parts.

.ListPortletView.java
[source,java]
----
public class ListPortletView extends VerticalLayout implements EventHandler {

    public ListPortletView() {
        // ... other initialization ...

        Grid<Contact> grid = new Grid<>(Contact.class);
        // ... other grid configuration ...
        grid.addItemClickListener(this::fireSelectionEvent);
    }

    private void fireSelectionEvent(ItemClickEvent<Contact> contactItemClickEvent) {
        // get contact id
        Integer contactId = contactItemClickEvent.getItem().getId();

        // save the ide into a string-to-string map
        Map<String, String> param = new HashMap<>();
        param.put("contactId", Integer.toString(contactId));

        // send the event with name "contact-selected"
        ListPortlet.getCurrent().sendEvent("contact-selected", param);
    }

    // receives all correctly formatted portlet hub events
    // we are looking for the contact-updated event generated by FormPortletView
    // we check that the event name is correct and that the contact exists. Then
    // we update the contact information.
    public void handleEvent(PortletEvent event) {
        if ("contact-updated".equals(event.getName())) {
            int contactId = Integer.parseInt(event.getParameters().get("contactId")[0]);
            Optional<Contact> contact = ContactService.getInstance().findById(contactId);
            if (contact.isPresent()) {
                // TODO: actually update grid
            }
        }
    }
}
----

The `ListPortletView` view implements only `EventHandler` interface; It does not care about portlet mode nor does it care about window mode.
The `ListPortletView` has two important methods from the portlet perspective: `fireSelectionEvent` and `handleEvent`.
Firing the selection event is triggered when user selects a contact in the list.
The method creates a parameter map which contains the id of the selected contact.
We then use the our portlet instance to send the event under the name `contact-selected`.
Other Vaadin portlet views that implement `EventHandler` will be notified about the event.

The other method, `handleEvent`, is provided by the interface `EventHandler`
and receives all events sent by other Vaadin Portlets.
In the method, we filter out all the unimportant event and wait for `contact-updated` to arrive.
It has the same parameters as the `contact-selected` event and we use the contact id to updated the correct contact information field on the list.

.FormPortletView.java
[source,java]
----
public class FormPortletView extends VerticalLayout
        implements PortletModeHandler, EventHandler {

    // called when the portlet mode changes
    // FormPortlet supports two modes: 'view' and 'edit'
    public void handlePortletMode(PortletModeEvent event) {
        // set fields to read-only mode when portlet mode is 'view'
        final boolean isViewMode = event.isViewMode();
        binder.setReadOnly(isViewMode);

        // set the button's text based on the portlet mode
        if (isViewMode) {
            action.setText(ACTION_EDIT);
        } else {
            action.setText(ACTION_SAVE);
        }
    }

    // receives all correctly formatted portlet hub events
    // we are looking for the contact-selected event generated by PortletListView
    // we check that the event name is correct and that the contact exists. Then
    // we display the contact information on the form
    public void handleEvent(PortletEvent event) {
        if ("contact-selected".equals(event.getName())) {
            int contactId = Integer.parseInt(event.getParameters().get("contactId")[0]);
            Optional<Contact> contact = ContactService.getInstance().findById(contactId);
            if (contact.isPresent()) {
                binder.setBean(contact.get());
                firstName.setValue(contact.get().getFirstName());
                image.setSrc(contact.get().getImage().toString());
            } else {
                // clear the form, if the contact does not exist
                cancel();
            }
        }
    }
}
----

`FormPortletView` implements implements `PortletModeHandler` and `EventHandler` interfaces - the allow the view to react to changes to portlet mode and events sent by other Portlets.
The important methods for the portlet operation are the ones provided by the implemented interfaces: `handlePortletMode` and `handleEvent`.
The `FormPortletView` supports two portlet modes: `view` and `edit`.
In the `handlePortletMode` method the view uses the mode the decide whether user should be able to edit the fields and the name of the action button on the form.

The `handleEvent` method expects the event `contact-selected` sent by the contact list portlet.
When the event arrives, the contact information portlet uses the contact id to display the correct contact information.

[INFO]
The events delivered by Portlet Hub can be handled by non-Vaadin portlets that have registered listeners onto the Portlet Hub for the events.
Events sent by the `sendEvent` method and delivered by Portlet Hub are prefixed with `vaadin.`.
If you send an event named `my-event`, Portlet Hub will deliver an event called `vaadin-my-event`.
