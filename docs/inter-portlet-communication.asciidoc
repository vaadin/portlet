= Inter-portlet Communication

Inter-portlet communication (IPC) is collection of methods which allow portlets to pass information from one to another.
This allows the separate portlets to work in cohort to provide a cohesive whole.

In Portlet 1.0 specification, portlet could only pass information via public request parameters; one portlet would create a request url with request parameters that held the data.
When the request was made, the handling portlet would receive those parameters and thus the data via the request.

Portlet 2.0 specification introduced events; an event is defined in the portlet.xml with the associated parameter types.
A portlet may dispatch an event, an portlets which have registered to handle events with certain names will process the dispatched event.
This form of IPC happens entirely on the server-side.

Portlet 3.0 specification brings `PortletHub` - a client-side API for portlets to use for various tasks.
One aspect of this is firing client-side events and creating action requests to the server-side portlets.

Vaadin Portlets allows the developer to leverage all of these different methods for using IPC and provides helper APIs for common use-cases.

== Vaadin Portlet IPC with 3.0 Specification

When Vaadin Portlets are ran on a portal which supports Portlet 3.0 specification, Vaadin Portlet automatically adds `PortletHub` support on the client-side.
The standard IPC for Vaadin Portlets leverages `PortletHub` to provide the developer with seamless integration of the client-side and server-side events.

You can use `VaadinPortlet` to send events from your portlet's view class.
These events are then delivered to client-side, where the events are delivered forward forward using `PortletHub::dispatchClientEvent()`.
To handle the events dispatched by the `PortletHub` you can either register your portlet's view class to handle certain events based on the event names, or register JavaScript event handler onto the client-side.

=== Firing and Receiving Events in Java Code

Given two portlet views `FiringPortletView` and `ReceivingPortletView` we setup our Vaadin Portlet IPC as follows:

.FiringPortletView.java
[source,java]
----
public class FiringPortletView extends Div {

    public FiringPortletView() {
        Button button = new Button("Fire event", event ->
            VaadinPortlet.sendEvent("my-ipc-event", Collections.emptyMap())
        );
    }
}
----

.ReceivingPortletView.java
[source,java]
----
public class ReceivingPortletView extends Div implements EventHandler {

    public ReceivingPortletView() {
        // register the event names which you'd like to handle
        VaadinPortlet.handleEvents("my-ipc-event");
    }

    @Override
    public void handleEvent(PortletEvent event) {
        if ("my-ipc-event".equals(event.getName())) {
            Notification.show("Received '" + eventName + "' event!");
        }
    }
}
----

In `FiringPortletView.java`, we use the method `VaadinPortlet::sendEvent(...)` to fire our event.
The event is fired using the available delivery method, preferring `PortletHub`.
If you would like to fire events as specified in the 2.0 specification, see <<ipc-20>>.

In `ReceivingPortletView.java` implements `EventHandler` interface, which allows it to handle `PortletEvents`.
In the constructor we register the event names for which we'd like to receive updates using `VaadinPortlet.handleEvents(...)`.
If the view does not register portlet names, it will not receive events.
The `handleEvent` method is called with `PortletEvent` when an event is received.

Using `PortletHub` for IPC has few benefits:

- Non-Vaadin portlets may receive these events on the client-side just as easily.
- Firing these events does not require the code to be executed inside a portlet request.
- These events do not need to be registered into the portlet.xml or defined using the 3.0 specification annotations.

[NOTE]
If the portlet is deployed to a portal which only supports 2.0 specification instead of 3.0, the event delivery mechanism attempts to fallback onto 2.0 event delivery.
In order to send and receive 2.0 specification events reliably, the events need to be defined in the portlet.xml.

=== Registering JavaScript Event Handler
This is done, by calling VaadinPortlet.addJavaScriptEventHandler(...), maybe +
(TODO!)

[#ipc-20]
== Vaadin Portlet IPC with 2.0 Specification
TODO things:
- is a fallback for `sendEvent`
- how to register events
- using specific Vaadin API
- overriding methods in VaadinPortlet

