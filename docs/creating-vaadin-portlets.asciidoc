= Creating Vaadin Portlets

In this chapter we will learn how to create Vaadin Portlets and how to deploy those Portlets to https://portals.apache.org/pluto/index.html[Pluto 3.1 Portal]
running on a TomCat 8.0 web server.

Pluto is a reference implementation for Portlet specification and while good for testing, it should not be used in a production environment.

== Creating a Vaadin Portlet

We have two ways to start the creation of our Vaadin Portlet: starting from scratch or from https://github.com/vaadin/base-starter-flow-portlet[base-starter-flow-portlet] project.
The starter project contains everything needed to quickly create your own Vaadin Portlet, with the code laid out in advance.

Here we will walk through all the steps for setting up a portlet project.

=== Setting up Portlet project

First, download Vaadin base starter from https://vaadin.com/start (select "Plain Java Servlet" as the technology stack) and follow the instructions in the sidebar.

Next, update your pom.xml:

. Update `vaadin-version` property to `14.1-SNAPSHOT` (temporary)
. Add the following dependencies:
+
.(temporary)
[source,xml]
----
<dependency>
    <groupId>com.vaadin</groupId>
    <artifactId>flow</artifactId>
    <version>2.1.portal-SNAPSHOT</version>
    <type>pom</type>
</dependency>
----
+
[source,xml]
----
<dependency>
    <groupId>com.vaadin</groupId>
    <artifactId>vaadin-portlet</artifactId>
    <version>1.0-SNAPSHOT</version>
</dependency>
----
+
[source,xml]
----
<dependency>
    <groupId>javax.portlet</groupId>
    <artifactId>portlet-api</artifactId>
    <version>3.0.1</version>
</dependency>
----

=== Creating the Portlet (prototype text)

In the most basic setup, Vaadin Portlets consist of two classes:

* A class, which `extends VaadinPortlet`
* A Vaadin Component, which defines the portlet's view contents

The class extending `VaadinPortlet` serves as the entry point for our Vaadin Portlet application.
It serves a similar function to a Servlet, but in portlet context.

The second class is any Vaadin Component, which should be displayed as the contents of the Vaadin Portlet.
You might take an existing component, create an entirely new component, or create a host component to which you add an existing Vaadin Component.

Find the `MainView.java` provided with the project and create `MyPortlet.java` in the same folder.
Inside the file, add the following code:

[source,java]
----
public class MyPortlet extends VaadinPortlet<MainView> {

}
----

Next, open the `MainView.java`.
Remove both the `@Route` and `@PWA` annotations - those do not make sense for our portlet.

The final code should look something like this:

[source,java]
----
public class MainView extends VerticalLayout {

    public MainView() {
        Button button = new Button("Click me",
                event -> Notification.show("Clicked!"));
        add(button);
    }
}
----

When an user clicks on the button, a notification with the text "Clicked!" should appear then the lower left corner of the browser window.
Not the most useful portlet ever created, but a strong first step.

== Deploying your Vaadin Portlet

=== Building Vaadin Portlet

In order to build the portlet we just created, we must add some more configuration to the pom.xml.
Vaadin Portlet deployments are packaged into two war files.
One war file contains all the static resources shared by the Vaadin Portlets, and the other war file contains the actual portlets.
This allows for more complex situations where multiple portlets come from separate war files.
In the future, you will have tooling to create the asset bundle which fits all the deployed portlet war files.

Add the following plugin configuration to the pom.xml:

[source,xml]
----
<plugin>
    <groupId>org.apache.maven.plugins</groupId>
    <artifactId>maven-war-plugin</artifactId>
    <version>3.2.3</version>
    <configuration>
        <archive>
            <manifestEntries>
                <Implementation-Title>${project.name}</Implementation-Title>
                <Implementation-Version>${project.version}</Implementation-Version>
            </manifestEntries>
        </archive>
    </configuration>
    <executions>
        <execution>
            <id>static-files</id>
            <goals>
                <goal>war</goal>
            </goals>
            <configuration>
                <warName>vaadin-portlet-static</warName>
                <packagingIncludes>WEB-INF/lib/flow-client*.jar,VAADIN/</packagingIncludes>

                <webResources>
                    <resource>
                        <!-- this is relative to the pom.xml directory -->
                        <directory>target/classes/META-INF/</directory>
                        <includes>
                            <include>**</include>
                        </includes>
                        <excludes>
                            <exclude>VAADIN/config/**</exclude>
                        </excludes>
                    </resource>
                </webResources>
            </configuration>
        </execution>
        <execution>
            <id>portlet-war</id>
            <goals>
                <goal>war</goal>
            </goals>
            <configuration>
                <primaryArtifact>true</primaryArtifact>
                <packagingExcludes>WEB-INF/classes/META-INF/VAADIN/build/**,VAADIN/</packagingExcludes>
            </configuration>
        </execution>
    </executions>
</plugin>
----

=== Deploying Vaadin Portlet

. Run `mvn install` in you project directory.
. Download https://www.apache.org/dist/portals/pluto/pluto-bundle-3.1.0.zip[TomCat 8.0 + Pluto 3.1 bundle] and extract it to a location you prefer.
. Copy both `*.war` files from `{project directory}/target` into `{bundle extract location}/webapps`.
. Start the web server by
* Opening a command prompt in the `{bundle extract directory}` folder
* Running the command `./bin/startup.sh` or `./bin/startup.bat` (unix/windows)
. Once the web server has started, navigate to http://localhost:8080/pluto
. Sign in to the Portal
* Username: pluto
* Password: pluto
. Create a new page for your portlet, or add it to one of the existing pages
* ... TODO
